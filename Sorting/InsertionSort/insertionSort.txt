~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Insertion Sort~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Insertion Sort:In this sorting technique, we take the 1st element of unsorted array and 
                insert it into its correct place in sorted array;
                
    [1, 3, 5, 7, 9, 8, 6, 4, 2, 10]; initily we assume entire array is unsorted and it's firest element is at i=10
    j = 0
    since "j > 0" condition fail so while loop will not execte;
    
    1, [3, 5, 7, 9, 8, 6, 4, 2, 10], i=1;
    j = 1 
    since "arr[j-1] > arr[j]" condition fail so while loop will not execte;
    
    1, 3, [5, 7, 9, 8, 6, 4, 2, 10], i=2;
     j = 2
    since "arr[j-1] > arr[j]" condition fail so while loop will not execte;
    
    1, 3, 5, [7, 9, 8, 6, 4, 2, 10], i=3;
     j = 3
    since "arr[j-1] > arr[j]" condition fail so while loop will not execte;
    
    1, 3, 5, 7, [9, 8, 6, 4, 2, 10], i=4;
     j = 4
    since "arr[j-1] > arr[j]" condition fail so while loop will not execte;
    
    1, 3, 5, 7, 9, [8, 6, 4, 2, 10], i=5;
     j = 5
    since both condition is true so while loop will execte;
    and 8 will get its place due to swap of adjecent element of sorted array;
    
    1, 3, 5, 7, 8, 9, [6, 4, 2, 10], i=6;
     j = 6
    since both condition is true so while loop will execte;
    and 6 will get its place due to swap of adjecent element of sorted array;
    
    1, 3, 5, 7, 8, 9, 6, [4, 2, 10], i=7;
     j = 7
    since both condition is true so while loop will execte;
    and 4 will get its place due to swap of adjecent element of sorted array;
    
    1, 3, 5, 7, 8, 9, 6, 4, [2, 10], i=8;
     j = 8
    since both condition is true so while loop will execte;
    and 2 will get its place due to swap of adjecent element of sorted array;
    
    1, 3, 5, 7, 8, 9, 6, 4, 2, [10], i=9;
     j = 9
    since both condition is true so while loop will execte;
    and 10 will get its place due to swap of adjecent element of sorted array;
    
    
    
  let's analiyse the time and space complexity
  
  space complexity
    since we are not taking any extra space in any case
    spaceComplexity: O(1) for all best, Average, worst case.
    
  time complexity at worst
    for i=0, second loop will take O(1) time;
    i=1, O(2)
    i=2, O(3)
    .
    .
    .
    .
    .
    i=n-1, O(n)
    i=n, O(n+1)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  as you can understand, this is the summation of n natural Number;
   i.e. n(n+1)/2
  time complexity at worst case is O(n^2)
  
  
  time complexity at Best Case
  if the Array will already sorted in accending order then the while loop will never execute
  so in that case time complexity will be O(n);
  i.e. time complexity at Best case is O(n)
  
  time complexity at Average case is O(n)