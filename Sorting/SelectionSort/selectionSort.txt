~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Selection Sort~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

selectionSort: In this sorting algorithm, we select the minimum element fron the unsorted Array
and swap it with 1st element unsorted array;

    we can acchive this technique using two loop, 1st loop represent the unsorted array and 
    2nd loop find the index of minium element of unsorted array;
    and the we swap the 

[1,3,5,7,9,8,6,4, 2, 10] //i=0, that means we assume entire array is unsorted;
  assuming the ith index is the index of minimum element and assign it to a minIndex variable;
    i.e. minIndex = 0;
  useing second loop we find the index of minimum element and update the minIndex variable;
    minIndex = 0;
  swap the minimum element and 1st element of unsorted array;
    i.e. 1 swap with 1;
  
  1,[3,5,7,9,8,6,4, 2, 10]
  i=1
  minIndex = 1;
  useing second loop, minIndex = 8;
  swap the minimum element and 1st element of unsorted array;
    i.e. 2 swap with 3;
  
  1, 2, [5, 7,  9, 8, 6, 4, 3, 10]
  i=2;
  minEleIndex = 2;
  useing second loop, minIndex = 8;
    i.e. 3 swap with 5;
  
  1, 2, 3, [7,  9, 8, 6, 4, 5, 10]
  i=3;
  minEleIndex = 3;
  useing second loop, minIndex = 7;
    i.e. 4 swap with 7;
  
  1, 2, 3, 4, [9, 8, 6, 7, 5, 10]
  i=4;
  minEleIndex = 4;
  useing second loop, minIndex = 8;
    i.e. 5 swap with 9;
    
  
  1, 2, 3, 4, 5, [8, 6, 7, 9, 10]
  i=5;
  minEleIndex = 5;
  useing second loop, minIndex = 6;
    i.e. 6 swap with 8;
    
  1, 2, 3, 4, 5, 6, [8, 7, 9, 10]
  i=6;
  minEleIndex = 6;
  useing second loop, minIndex = 7;
    i.e. 7 swap with 8;
  
  
  1, 2, 3, 4, 5, 6, 7, [8, 9, 10]
  i=7;
  minEleIndex = 7;
  useing second loop, minIndex = 7;
    i.e. 8 swap with 8;
  
  1, 2, 3, 4, 5, 6, 7, 8, [9, 10]
  i=8;
  minEleIndex = 8;
  useing second loop, minIndex = 8;
    i.e. 9 swap with 9;

  1, 2, 3, 4, 5, 6, 7, 8, 9, [10]
  i=9;
  minEleIndex = 9;
  useing second loop, minIndex = 9;
    i.e. 10 swap with 10;
    
    
    
  let's analiyse the time and space complexity
  
  space complexity
    since we are not taking any extra space in any case
    spaceComplexity: O(1) for all best, Average, worst case.
  
  time complexity
    for i=0, second loop will take O(n) time to get min element;
    i=1, O(n-1) to get min element;
    i=2, O(n-2) to get min element;
    .
    .
    .
    .
    .
    i=n-1, O(2) to get min element;
    i=n, O(1) to get min element;
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  as you can understand, this is the summation of n natural Number;
   i.e. n(n+1)/2
  time complexity in each case 
    Best Case O(n);
    Average case O(n):
    Worst case O(n);