~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Queue ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Queue: A queue is a linear data structure that follows "FIFO" principle. we can implement it using Array or Linkeed List.
        # F - First
        # I - In
        # F - First
        # O - Out
        
        i.e. First element added to the queue is the first one to be removed.


Operations:
    * Enqueue : Adds an item to the rear (back) of the queue.
    * Dequeue : Removes an item from the front of the queue.
    * getFront : provide item at the front of the queue.
    * getRear : provide item at the rear of the queue.
    * IsEmpty : Checks if the queue has no elements.
    * getSize : Returns the number of elements in the queue.


Types of Queues:
    * Simple Queue
    * Circular Queue: A queue where the last position is connected to the first, forming a circle. 
                      It helps efficiently use space.
    * Priority Queue: A queue where elements are dequeued in order of priority rather than the order in which they were enqueued.
    * Double-ended Queue (Deque): A queue where you can add and remove elements from both ends.


Applications:
    Queues are used in scenarios where order matters.
        * Scheduling tasks: Like in operating systems, tasks are scheduled in the order they arrive.
        * Handling requests in servers: Incoming data or requests are processed in the order they are received.
        * Breadth-First Search (BFS) in graphs: A queue helps explore nodes level by level.
        * Printer Queue: Handling print jobs in the order they are received by a printer.
        * Traffic Management: Managing the flow of vehicles at traffic signals or toll booths.
        * Network Traffic Management: Managing data packets in routers and switches, ensuring orderly transmission.
        * Order Processing in E-commerce: Managing the order fulfillment process in the order received.
        * Event-Driven Programming: Handling events (like button clicks) in GUI applications in the order they are triggered.
        * Asynchronous Processing: Managing tasks like sending emails or processing data in a queue to avoid overloading.
        * Load Balancing: Distributing tasks across multiple resources or servers in an orderly manner.
        * Virtual Waiting Lines: Managing virtual queues for services like appointments or ticket bookings.


Summary of Time Complexity:
    Operation	    Linked List	        Array
    Enqueue	        O(1)	            O(1)
    Dequeue	        O(1)	            O(n)
    getFront	    O(1)	            O(1)
    getRear	        O(1)	            O(1)
    IsEmpty	        O(1)	            O(1)
    Size	        O(1)	            O(1)
    Printer         O(n)                O(n)


    * Array-based queues may have an amortized O(1) time complexity for enqueue, 
      but resizing the array in case of overflow results in O(n) complexity for that specific operation.

    * Linked-list-based queues avoid resizing but have a slightly higher overhead per operation due to pointer manipulation.

    